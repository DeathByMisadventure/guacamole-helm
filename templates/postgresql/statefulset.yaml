{{- if .Values.postgres.enabled }}
{{- $fullName := include "guacamole.fullname" . -}}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "guacamole.fullname" . }}-postgres
  namespace: {{ .Release.Namespace | quote }}
  labels: {{ include "guacamole.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.postgres.replicas }}
  serviceName: {{ $fullName }}-postgres
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ include "guacamole.name" . }}-postgres
      app.kubernetes.io/instance: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ include "guacamole.name" . }}-postgres
        app.kubernetes.io/instance: {{ .Release.Name }}
      annotations:
        checksum/secret: {{ include (print $.Template.BasePath "/postgresql/secret.yaml") . | sha256sum }}
    spec:
      automountServiceAccountToken: false
      containers:
        - name: {{ .Values.postgres.name }}
          envFrom:
            - secretRef:
                name: {{ .Values.postgres.name }}-secret
          image: {{ .Values.postgres.image.repository }}:{{ .Values.postgres.image.tag }}
          imagePullPolicy: {{ .Values.postgres.image.pullPolicy }}
          ports:
            - name: postgres
              containerPort: {{ .Values.postgres.service.port }}
              protocol: TCP
          livenessProbe:
            exec:
              command:
              - pg_isready
              - -U
              - {{ .Values.postgres.user }}
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
          readinessProbe:
            exec:
              command:
              - pg_isready
              - -U
              - {{ .Values.postgres.user }}
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 5
          resources:
            {{- toYaml .Values.postgres.resources | nindent 12 }}
          securityContext:
            {{- toYaml .Values.postgres.securityContext | nindent 12 }}
          volumeMounts:
            - mountPath: /var/lib/postgresql/data
              name: {{ .Values.postgres.name }}-pvc
      restartPolicy: Always
      volumes:
        - name: {{ .Values.postgres.name }}-pvc
          persistentVolumeClaim:
            claimName: {{ .Values.postgres.name }}-pvc
  volumeClaimTemplates:
  - metadata:
      name: {{ .Values.postgres.name }}-pvc
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: {{ .Values.postgres.pvc.storageRequest | quote }}
{{- end }}
